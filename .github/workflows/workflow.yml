name: Deploy to Production

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: buy-track/my-debts
  APP_PATH: my-debts

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ vars.DOCKERHUB_URL }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        push: true
        file: ./docker/Dockerfile
        cache-from: type=registry,ref=${{ vars.DOCKERHUB_URL }}/${{ env.IMAGE_NAME }}:latest
        cache-to: type=inline
        tags: |
          ${{ vars.DOCKERHUB_URL }}/${{ env.IMAGE_NAME }}:${{ github.run_id }}
          ${{ vars.DOCKERHUB_URL }}/${{ env.IMAGE_NAME }}:latest

  trivy:
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 5
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.29.0
      with:
        image-ref: '${{ vars.DOCKERHUB_URL }}/${{ env.IMAGE_NAME }}:${{ github.run_id }}'
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL'
        scanners: 'vuln'
      env:
        TRIVY_DISABLE_VEX_NOTICE: true

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 5
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Copy file via scp
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.PRODUCTION_SERVER_IP }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PRODUCTION_SERVER_PORT }}
        source: "./docker/production/compose.yml"
        target: /opt/app/${{ env.APP_PATH }}

    - name: Executing remote ssh commands using ssh key
      uses: appleboy/ssh-action@v1.2.0
      with:
        host: ${{ secrets.PRODUCTION_SERVER_IP }}
        port: ${{ secrets.PRODUCTION_SERVER_PORT }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          set -xe
          cd /opt/app/${{ env.APP_PATH }}/docker/production/
          echo "${{ vars.ENVIRON }}" > .env
          docker login ${{ vars.DOCKERHUB_URL }} -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          TAG=${{ github.run_id }} docker compose pull -q
          TAG=${{ github.run_id }} docker compose up -d
          docker logout ${{ vars.DOCKERHUB_URL }}
          nohup docker system prune -f -a &
